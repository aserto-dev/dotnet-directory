// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: aserto/directory/assertion/v3/assertion.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Aserto.Directory.Assertion.V3 {
  public static partial class Assertion
  {
    static readonly string __ServiceName = "aserto.directory.assertion.v3.Assertion";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.GetAssertionRequest> __Marshaller_aserto_directory_assertion_v3_GetAssertionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.GetAssertionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.GetAssertionResponse> __Marshaller_aserto_directory_assertion_v3_GetAssertionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.GetAssertionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.ListAssertionsRequest> __Marshaller_aserto_directory_assertion_v3_ListAssertionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.ListAssertionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.ListAssertionsResponse> __Marshaller_aserto_directory_assertion_v3_ListAssertionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.ListAssertionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.SetAssertionRequest> __Marshaller_aserto_directory_assertion_v3_SetAssertionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.SetAssertionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.SetAssertionResponse> __Marshaller_aserto_directory_assertion_v3_SetAssertionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.SetAssertionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest> __Marshaller_aserto_directory_assertion_v3_DeleteAssertionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse> __Marshaller_aserto_directory_assertion_v3_DeleteAssertionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Aserto.Directory.Assertion.V3.GetAssertionRequest, global::Aserto.Directory.Assertion.V3.GetAssertionResponse> __Method_GetAssertion = new grpc::Method<global::Aserto.Directory.Assertion.V3.GetAssertionRequest, global::Aserto.Directory.Assertion.V3.GetAssertionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAssertion",
        __Marshaller_aserto_directory_assertion_v3_GetAssertionRequest,
        __Marshaller_aserto_directory_assertion_v3_GetAssertionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Aserto.Directory.Assertion.V3.ListAssertionsRequest, global::Aserto.Directory.Assertion.V3.ListAssertionsResponse> __Method_ListAssertions = new grpc::Method<global::Aserto.Directory.Assertion.V3.ListAssertionsRequest, global::Aserto.Directory.Assertion.V3.ListAssertionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAssertions",
        __Marshaller_aserto_directory_assertion_v3_ListAssertionsRequest,
        __Marshaller_aserto_directory_assertion_v3_ListAssertionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Aserto.Directory.Assertion.V3.SetAssertionRequest, global::Aserto.Directory.Assertion.V3.SetAssertionResponse> __Method_SetAssertion = new grpc::Method<global::Aserto.Directory.Assertion.V3.SetAssertionRequest, global::Aserto.Directory.Assertion.V3.SetAssertionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAssertion",
        __Marshaller_aserto_directory_assertion_v3_SetAssertionRequest,
        __Marshaller_aserto_directory_assertion_v3_SetAssertionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest, global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse> __Method_DeleteAssertion = new grpc::Method<global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest, global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAssertion",
        __Marshaller_aserto_directory_assertion_v3_DeleteAssertionRequest,
        __Marshaller_aserto_directory_assertion_v3_DeleteAssertionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Aserto.Directory.Assertion.V3.AssertionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Assertion</summary>
    [grpc::BindServiceMethod(typeof(Assertion), "BindService")]
    public abstract partial class AssertionBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Aserto.Directory.Assertion.V3.GetAssertionResponse> GetAssertion(global::Aserto.Directory.Assertion.V3.GetAssertionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Aserto.Directory.Assertion.V3.ListAssertionsResponse> ListAssertions(global::Aserto.Directory.Assertion.V3.ListAssertionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Aserto.Directory.Assertion.V3.SetAssertionResponse> SetAssertion(global::Aserto.Directory.Assertion.V3.SetAssertionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse> DeleteAssertion(global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Assertion</summary>
    public partial class AssertionClient : grpc::ClientBase<AssertionClient>
    {
      /// <summary>Creates a new client for Assertion</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AssertionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Assertion that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AssertionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AssertionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AssertionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.GetAssertionResponse GetAssertion(global::Aserto.Directory.Assertion.V3.GetAssertionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssertion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.GetAssertionResponse GetAssertion(global::Aserto.Directory.Assertion.V3.GetAssertionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAssertion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.GetAssertionResponse> GetAssertionAsync(global::Aserto.Directory.Assertion.V3.GetAssertionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssertionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.GetAssertionResponse> GetAssertionAsync(global::Aserto.Directory.Assertion.V3.GetAssertionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAssertion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.ListAssertionsResponse ListAssertions(global::Aserto.Directory.Assertion.V3.ListAssertionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAssertions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.ListAssertionsResponse ListAssertions(global::Aserto.Directory.Assertion.V3.ListAssertionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAssertions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.ListAssertionsResponse> ListAssertionsAsync(global::Aserto.Directory.Assertion.V3.ListAssertionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAssertionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.ListAssertionsResponse> ListAssertionsAsync(global::Aserto.Directory.Assertion.V3.ListAssertionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAssertions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.SetAssertionResponse SetAssertion(global::Aserto.Directory.Assertion.V3.SetAssertionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAssertion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.SetAssertionResponse SetAssertion(global::Aserto.Directory.Assertion.V3.SetAssertionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAssertion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.SetAssertionResponse> SetAssertionAsync(global::Aserto.Directory.Assertion.V3.SetAssertionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAssertionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.SetAssertionResponse> SetAssertionAsync(global::Aserto.Directory.Assertion.V3.SetAssertionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAssertion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse DeleteAssertion(global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAssertion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse DeleteAssertion(global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAssertion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse> DeleteAssertionAsync(global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAssertionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse> DeleteAssertionAsync(global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAssertion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AssertionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AssertionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AssertionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAssertion, serviceImpl.GetAssertion)
          .AddMethod(__Method_ListAssertions, serviceImpl.ListAssertions)
          .AddMethod(__Method_SetAssertion, serviceImpl.SetAssertion)
          .AddMethod(__Method_DeleteAssertion, serviceImpl.DeleteAssertion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AssertionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAssertion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Aserto.Directory.Assertion.V3.GetAssertionRequest, global::Aserto.Directory.Assertion.V3.GetAssertionResponse>(serviceImpl.GetAssertion));
      serviceBinder.AddMethod(__Method_ListAssertions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Aserto.Directory.Assertion.V3.ListAssertionsRequest, global::Aserto.Directory.Assertion.V3.ListAssertionsResponse>(serviceImpl.ListAssertions));
      serviceBinder.AddMethod(__Method_SetAssertion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Aserto.Directory.Assertion.V3.SetAssertionRequest, global::Aserto.Directory.Assertion.V3.SetAssertionResponse>(serviceImpl.SetAssertion));
      serviceBinder.AddMethod(__Method_DeleteAssertion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Aserto.Directory.Assertion.V3.DeleteAssertionRequest, global::Aserto.Directory.Assertion.V3.DeleteAssertionResponse>(serviceImpl.DeleteAssertion));
    }

  }
}
#endregion
